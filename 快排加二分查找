package main

import (
	"bufio"
	"fmt"
	"io"
	"log"
	"os"
	"strconv"
	"strings"
	"time"
)

const N =23

type User struct {
	Name string
	Password int
	mail  string
}

func main() {
	dst := "C:\\Users\\wangfei\\Desktop\\数据测试.txt"
	file, err := os.Open(dst)
	if err != nil {
		fmt.Println(err)
	}
	files := make([]User, N, N)
	br := bufio.NewReader(file)
	i:=0
	for true {
		line, _, err := br.ReadLine()
		if err == io.EOF {
			log.Println("加载数据到内存完成")
			break
		}
		str := strings.Split(string(line), "#")
		pas, _ := strconv.Atoi(str[1])
		files[i].Name = str[0]
		files[i].Password = pas
		files[i].mail = str[2]
		i++
	}
		start := time.Now()
		fmt.Println("开始排序")
		files = QuickSort(files)
		fmt.Println("排序结束", time.Since(start))
		for ; ; {
			fmt.Println("请输入您所查询的名字: ")
			var name string
			fmt.Scanln(&name)
			Binarystart := time.Now()
			index := Binary(files, name)
			if index != -1 {
				fmt.Printf("index=%d,%v\n", index, files[index])
			} else {
				fmt.Println("没有找到")
			}
			fmt.Println("寻找耗时时间为：", time.Since(Binarystart))
		}
}

//根据User结构体的Name成员进行快速排序
func QuickSort(arr []User) []User {
	length := len(arr)
	if length <= 1 {
		return arr
	}
	nummid := arr[0].Name
	low :=  make([]User, 0, 0)
	high := make([]User, 0, 0)
	mid := make([]User, 0, 0)
	mid = append(mid, arr[0])
	for i:=1; i<length; i++ {
		if strings.Compare(arr[i].Name, nummid) == -1 {
			low = append(low, arr[i])
		} else if strings.Compare(arr[i].Name, nummid) == 1 {
			high = append(high, arr[i])
		} else {
			mid = append(mid, arr[i])
		}
	}
	low, high = QuickSort(low), QuickSort(high)
	arr = append(append(low, mid...), high...)
	return arr
}

//二分查找数据
func Binary(arr []User, data string) int {
	left := 0             //最下边
	right := len(arr) - 1 //最上面
	//加上等于号，是因为等于的情况，无论是left  向上加 还是 right向下减, 也有出现恰好left=right的情况
	for left <= right {
		mid := (left + right) / 2
		if strings.Compare(arr[mid].Name, data) == 1{
			right = mid - 1
		} else if strings.Compare(arr[mid].Name, data) == -1 {
			left = mid + 1
		} else {
			return mid
		}
	}
	return -1
}
